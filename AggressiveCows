Problem statement
You are given an array 'arr' consisting of 'n' integers which denote the position of a stall.
You are also given an integer 'k' which denotes the number of aggressive cows.
You are given the task of assigning stalls to 'k' cows such that the minimum distance between any two of them is the maximum possible.
Print the maximum possible minimum distance.

Example:
Input: 'n' = 3, 'k' = 2 and 'arr' = {1, 2, 3}
Output: 2
Explanation: The maximum possible minimum distance will be 2 when 2 cows are placed at positions {1, 3}. Here distance between cows is 2.


import java.util.Arrays; 

class Solution {
    public static int aggressiveCows(int []stalls, int k) {
        //sort stalls array
        Arrays.sort(stalls);       
        int high = stalls[stalls.length-1]-stalls[0];
        int low =   1;
        while(low<=high){
            int mid = (low+high)/2;
            if(canWePlaceCows(stalls, mid, k)){
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return high;
    }

    static boolean canWePlaceCows(int[] stalls, int dist, int cows){
        int cntCows = 1;
        int last = stalls[0];
        for(int i=1;i<stalls.length;i++){
            if(stalls[i] - last>=dist){
                cntCows++;
                last = stalls[i];
            }
        }
       if(cntCows>=cows)return true;
       return false;
    }

    static int getMax(int[] stalls){
        int maxx = Integer.MIN_VALUE;
        for(int i=0;i<stalls.length;i++){
            maxx = maxx>stalls[i]?maxx:stalls[i];
        }
        return maxx;
    }
    static int getMin(int[] stalls){
        int minn = Integer.MAX_VALUE;
        for(int i=0;i<stalls.length;i++){
            minn = minn<stalls[i]?minn:stalls[i];
        }
        return minn;
    }
}
